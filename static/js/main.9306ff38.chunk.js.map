{"version":3,"sources":["component/SearchBar/SearchBar.js","component/Track/Track.js","component/TrackList/TrackList.js","component/SearchResults/SearchResults.js","component/Playlist/Playlist.js","util/Spotify.js","component/App/App.js","reportWebVitals.js","index.js"],"names":["SearchBar","props","search","bind","handleTermChange","handleKeyPress","state","term","this","onSearch","event","setState","target","value","key","className","placeholder","onChange","onKeyPress","onClick","React","Component","Track","addTrack","removeTrack","isRemoval","onAdd","track","onRemove","name","artist","album","renderAction","TrackList","tracks","map","id","SearchResults","searchResults","Playlist","handleNameChange","onNameChange","defaultValue","playlistTracks","onSave","accessToken","expiresIn","Spotify","getAccessToken","url","window","location","href","match","accessTokenFromUrl","expiresInFromUrl","Number","setTimeout","history","pushState","q","fetch","headers","Authorization","then","response","ok","json","jsonResponse","items","artists","uri","savePlaylist","playlistName","trackURIs","userID","playlistID","method","body","JSON","stringify","uris","App","updatePlaylistName","find","savedTrack","push","updatedPlaylist","filter","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.9306ff38.chunk.js","sourcesContent":["import React from 'react';\r\nimport './SearchBar.css';\r\n\r\nclass SearchBar extends React.Component {\r\n    constructor(props) {\r\n        super(props);\r\n\r\n        this.search = this.search.bind(this);\r\n        this.handleTermChange = this.handleTermChange.bind(this);\r\n        this.handleKeyPress = this.handleKeyPress.bind(this);\r\n\r\n        this.state = {term: ''};\r\n    }\r\n   \r\n    // Searches Spotify library\r\n    search() {\r\n        this.props.onSearch(this.state.term);\r\n    }\r\n\r\n    // Sets name of playlist\r\n    handleTermChange(event) {\r\n        this.setState({term: event.target.value});\r\n    }\r\n   \r\n    // Listens for enter key press. Inititates search of Spotify library\r\n    handleKeyPress(event) {\r\n        if(event.key === 'Enter') {\r\n            this.props.onSearch(this.state.term);\r\n        }\r\n    }\r\n\r\n    // Renders the input box to search for music\r\n    render() {\r\n        return (\r\n            <div className=\"SearchBar\">\r\n                <input placeholder=\"Enter A Song, Album, or Artist\" onChange={this.handleTermChange} onKeyPress={this.handleKeyPress}/>\r\n                <a onClick={this.search}>SEARCH</a>\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\nexport default SearchBar;","import React from 'react';\r\nimport './Track.css';\r\n\r\nclass Track extends React.Component {\r\n    constructor(props) {\r\n        super(props);\r\n\r\n        this.addTrack = this.addTrack.bind(this);\r\n        this.removeTrack = this.removeTrack.bind(this);\r\n    }\r\n   \r\n    // Provides correct action button. Add or remove track\r\n    renderAction() {\r\n        if(this.props.isRemoval) {\r\n            return (<a className=\"Track-action\" onClick={this.removeTrack}> - </a>);\r\n        }\r\n        return (<a className=\"Track-action\" onClick={this.addTrack}> + </a>);\r\n    }\r\n   \r\n    // Adds track to playlist\r\n    addTrack() {\r\n        this.props.onAdd(this.props.track);\r\n    }\r\n\r\n    // Removes track from playlist\r\n    removeTrack() {\r\n        this.props.onRemove(this.props.track);\r\n    }\r\n\r\n    // Renders the individual tracks that will be displayed in the search results and playlist queue\r\n    render() {\r\n        return (\r\n            <div className=\"Track\">\r\n                <div className=\"Track-information\">\r\n                    <h3>{this.props.track.name}</h3>\r\n                    <p>{this.props.track.artist} | {this.props.track.album}</p>\r\n                </div>\r\n                {this.renderAction()}\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\nexport default Track;","import React from 'react';\r\nimport Track from '../Track/Track';\r\nimport './TrackList.css'\r\n\r\nclass TrackList extends React.Component {\r\n    // Renders the collection of tracks returned in the search results and playlist queue\r\n    render () {\r\n        return (\r\n            <div className=\"TrackList\">\r\n                {\r\n                    this.props.tracks.map(track => {\r\n                        return (\r\n                                <Track\r\n                                    track={track}\r\n                                    key={track.id}\r\n                                    onAdd={this.props.onAdd}\r\n                                    onRemove={this.props.onRemove}\r\n                                    isRemoval={this.props.isRemoval}\r\n                                />\r\n                        );\r\n                    })\r\n                }\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\nexport default TrackList;","import React from 'react';\r\nimport TrackList from '../TrackList/TrackList';\r\nimport './SearchResults.css'\r\n\r\nclass SearchResults extends React.Component {\r\n    // Renders the tracks returned in the search results\r\n    render() {\r\n        return (\r\n            <div className=\"SearchResults\">\r\n                <h2>Results</h2>\r\n                <TrackList \r\n                    tracks={this.props.searchResults}\r\n                    onAdd={this.props.onAdd}\r\n                    isRemoval={false}\r\n                />\r\n            </div>            \r\n        )\r\n    }\r\n}\r\n\r\nexport default SearchResults;","import React from 'react';\r\nimport TrackList from '../TrackList/TrackList';\r\nimport './Playlist.css';\r\n\r\nclass Playlist extends React.Component {\r\n    constructor(props) {\r\n        super(props);\r\n        this.handleNameChange = this.handleNameChange.bind(this);\r\n    }\r\n   \r\n    // Sets name of playlist\r\n    handleNameChange(event) {\r\n        this.props.onNameChange(event.target.value);\r\n    }\r\n    \r\n    // Renders the tracks added to the playlist queue\r\n    render() {\r\n        return (\r\n            <div className=\"Playlist\">\r\n                <input defaultValue={'New Playlist'} onChange={this.handleNameChange}/>\r\n                <TrackList \r\n                    tracks={this.props.playlistTracks}\r\n                    onRemove={this.props.onRemove}\r\n                    isRemoval={true}/>\r\n                <a className=\"Playlist-save\" onClick={this.props.onSave}>SAVE TO SPOTIFY</a>\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\nexport default Playlist;","const clientID = '5aa3e0e3eb334fd9b32fe7391b2c4efe';\r\nconst redURI = 'http://localhost:3000/';\r\nlet accessToken = '';\r\nlet expiresIn = '';\r\n\r\nconst Spotify = {\r\n    // Checks if user has logged into Spotify account, if not redirects to authorization page\r\n    getAccessToken() {\r\n        if(accessToken) {\r\n            return accessToken;\r\n        }\r\n        \r\n        const url = window.location.href;\r\n        if(url.match(/access_token=([^&]*)/) && url.match(/expires_in=([^&]*)/)) {\r\n            const accessTokenFromUrl = url.match(/access_token=([^&]*)/);\r\n            const expiresInFromUrl = url.match(/expires_in=([^&]*)/);\r\n            accessToken = accessTokenFromUrl[1];\r\n            expiresIn = Number(expiresInFromUrl[1]);\r\n\r\n            window.setTimeout(() => accessToken = '', expiresIn * 1000);\r\n            window.history.pushState('Access Token', null, '/');\r\n\r\n            return accessToken;\r\n        }\r\n        else {\r\n            window.location = `https://accounts.spotify.com/authorize?client_id=${clientID}&response_type=token&scope=playlist-modify-public&redirect_uri=${redURI}`;\r\n        }\r\n    },\r\n\r\n    // Searches Spotify library\r\n    search(q) {\r\n        let accessToken = Spotify.getAccessToken();\r\n        \r\n        return fetch(`https://api.spotify.com/v1/search?type=track&q=${q}`,\r\n        {\r\n            headers: {Authorization: `Bearer ${accessToken}`}\r\n        }).then(response => {\r\n            if(response.ok) {\r\n                return response.json();\r\n            }\r\n        }).then(jsonResponse => {\r\n            if(jsonResponse.tracks) {\r\n                return jsonResponse.tracks.items.map(track => ({\r\n                    id: track.id,\r\n                    name: track.name,\r\n                    artist: track.artists[0].name,\r\n                    album: track.album.name,\r\n                    uri: track.uri\r\n                }));\r\n            }\r\n        });   \r\n    },\r\n\r\n    // Saves playlist to users Spotify account\r\n    savePlaylist(playlistName,trackURIs) {\r\n        let accessToken = Spotify.getAccessToken();\r\n        let userID = '';\r\n        let playlistID = '';\r\n        const headers = {Authorization: `Bearer ${accessToken}`};\r\n\r\n        if(!playlistName || !trackURIs) {\r\n            return;\r\n        }\r\n\r\n        return fetch('https://api.spotify.com/v1/me', {headers: headers}).then(response => {\r\n            if (response.ok) {\r\n              return response.json();\r\n            }\r\n          }).then(jsonResponse => {\r\n            userID = jsonResponse.id;\r\n      \r\n            return fetch(`https://api.spotify.com/v1/users/${userID}/playlists`, {\r\n              method: 'POST',\r\n              headers: {Authorization: `Bearer ${accessToken}`,'Content-type': 'application/json'},\r\n              body: JSON.stringify({name: playlistName})\r\n            }).then(response => {\r\n              return response.json();\r\n            }).then(jsonResponse => {\r\n              playlistID = jsonResponse.id;\r\n      \r\n              return fetch(`https://api.spotify.com/v1/users/${userID}/playlists/${playlistID}/tracks`, {\r\n                method: 'POST',\r\n                headers: {Authorization: `Bearer ${accessToken}`,'Content-type': 'application/json'},\r\n                body: JSON.stringify({uris: trackURIs})\r\n              }).then(response => {\r\n                return response.json();\r\n              }).then(jsonResponse => {\r\n                playlistID = jsonResponse.id;\r\n              });\r\n            });\r\n          });\r\n    }\r\n}\r\n\r\nexport default Spotify;","import React from 'react';\nimport './App.css';\nimport SearchBar from '../SearchBar/SearchBar';\nimport SearchResults from '../SearchResults/SearchResults';\nimport Playlist  from '../Playlist/Playlist';\nimport Spotify from '../../util/Spotify';\n\nclass App extends React.Component {\n  constructor(props) {\n    super(props);\n\n    this.addTrack = this.addTrack.bind(this);\n    this.removeTrack = this.removeTrack.bind(this);\n    this.updatePlaylistName = this.updatePlaylistName.bind(this);\n    this.savePlaylist = this.savePlaylist.bind(this);\n    this.search = this.search.bind(this);\n\n    this.state = {\n      searchResults: [],\n      playlistName: 'New Playlist',\n      playlistTracks: []\n    };\n  }\n\n  // If track isn't already in playlist, adds track to playlist array\n  addTrack(track) {\n    if (this.state.playlistTracks.find(savedTrack => savedTrack.id === track.id)) {\n      return;\n    }\n    this.state.playlistTracks.push(track);\n    this.setState({playlistTracks: this.state.playlistTracks}); \n  }\n  \n  // Removes track from playlist array\n  removeTrack(track) {\n    const updatedPlaylist = this.state.playlistTracks.filter(savedTrack => savedTrack.id !== track.id);\n    this.setState({playlistTracks: updatedPlaylist});\n  }\n\n  // Sets name of playlist\n  updatePlaylistName(name) {\n    this.setState({playlistName: name});\n  }\n\n  // Saves playlist to spotify account and resets state\n  savePlaylist() {\n    let trackURIs = this.state.playlistTracks.map(track => track.uri);\n    Spotify.savePlaylist(this.state.playlistName, trackURIs);\n    \n    this.setState({\n      playlistName: 'New Playlist',\n      playlistTracks: []\n    });\n  }\n\n  // Searches spotify library \n  search(term) {\n    Spotify.search(term).then(searchResults => {\n      this.setState({searchResults : searchResults});\n    });\n  }\n\n  // Renders the three functional sections of the application\n  render() {\n    return (\n      <div>\n        <h1>Sa<span className=\"highlight\">bri</span>ne</h1>\n        <div className=\"App\">\n          <SearchBar onSearch={this.search}/>\n          <div className=\"App-playlist\">\n            <SearchResults \n              searchResults={this.state.searchResults}\n              onAdd={this.addTrack}/>\n            <Playlist \n              playlistName={this.state.playlistName} \n              playlistTracks={this.state.playlistTracks}\n              onRemove={this.removeTrack}\n              onNameChange={this.updatePlaylistName}\n              onSave={this.savePlaylist}/>\n          </div>\n        </div>\n      </div>\n    );\n  }\n}\n\nexport default App;","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './component/App/App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}